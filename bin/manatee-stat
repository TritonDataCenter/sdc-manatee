#!/usr/bin/env node
// -*- mode: js -*-
// Display status of the manatee shards

var path = require('path');
var util = require('util');

var assert = require('assert-plus');
var bunyan = require('bunyan');
var getopt = require('posix-getopt');
var manatee = require('./manatee_common');
var pg = require('pg');
var vasync = require('vasync');
var zkplus = require('zkplus');


var Client = pg.Client;

var LOG = bunyan.createLogger({
    name: path.basename(process.argv[1]),
    level: (process.env.LOG_LEVEL || 'fatal'),
    src: true,
    serializers: {
        err: bunyan.stdSerializers.err
    }
});

function parseOptions() {
    var option;
    var opts = {};
    var parser = new getopt.BasicParser('hpvs:', process.argv);

    while ((option = parser.getopt()) !== undefined) {
        switch (option.option) {
            case 'h':
                usage();
                break;

            case 's':
                opts.shard = option.optarg;
                break;

            case 'p':
                opts.postgres = true;
                break;

            case 'v':
                LOG.level(Math.max(bunyan.TRACE, (LOG.level() - 10)));
                if (LOG.level() <= bunyan.DEBUG)
                    LOG = LOG.child({src: true});
                break;

            default:
                usage('invalid option: ' + option.option);
                process.exit(1);
                break;
        }
    }

    if (parser.optind() >= process.argv.length)
        usage('missing required argument: "zookeeper_ip"');

    opts.zk = process.argv[parser.optind()];

    return (opts);
}

function usage(msg) {
    if (msg)
        console.error(msg);

    var str = 'usage: ' + path.basename(process.argv[1]);
    str += '[-h] [-p] [-v] [-s shard] zookeeper_ip';
    console.error(str);
    process.exit(msg ? 1 : 0);
}

function ifError(err) {
    if (err) {
        console.error(err.toString());
        process.exit(1);
    }
}

var _opts = parseOptions();

manatee.createZkClient(_opts, function (err, zk) {
    ifError(err);

    manatee.loadTopology(zk, function (err2, topology) {
        ifError(err2);

        if (_opts.postgres) {
            manatee.pgStatus(topology, function (err3) {
                ifError(err3);

                manatee.printTopology(_opts, topology);
            });
        } else {
            manatee.printTopology(_opts, topology);
        }
    });
});
